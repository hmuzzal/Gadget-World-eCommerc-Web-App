@model GadgetWorld.Models.Product

@{
    Layout = "~/Views/Shared/_LayoutAdminMain.cshtml";
}



<div>

    <h2 align="center" style="margin-right:100px">Add Product</h2>


    @if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
    {
        if (ViewBag.Message != null)
        {
            <div class="alert alert-success">
                <strong>Success!</strong>@ViewBag.Message

            </div>
        }
        <div align="center">
            @Html.ActionLink("ADD NEW", "CreateProduct","Admin",
                new { id = 1}, //   Route args if needed; null if not.
                new {@style= "font-weight: bold;" }
                )
        </div>
    }

    else
    {
        using (Html.BeginForm("CreateProduct", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Category, new List<SelectListItem>(ViewBag.Category), "--Select Category--", new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                    @Html.ValidationMessage("ProductsExists", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.DropDownListFor(model => model.Color, new List<SelectListItem>(ViewBag.Color), "--Select Color--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.ImageFile, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.ImageFile, new { type = "file", htmlAttributes = new { @class = "form-control" } })
                    @*@Html.TextBoxFor(m => m.ImagePath, new { type = "file" })*@
                    @*<input type="file" id="fileUpload" name="fileUpload" size="23" />*@
                    @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Add" class="btn btn-default" />
                </div>
            </div>
        </div>


            if (ViewBag.Message != null)
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong>@ViewBag.Message

                </div>
            }
        }
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script type="text/javascript">
        $(function () { // will trigger when the document is ready
            $('.datepicker').datepicker(); //Initialise any date pickers
        });
    </script>

}



